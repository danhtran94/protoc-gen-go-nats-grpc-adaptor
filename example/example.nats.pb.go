// Code generated by protoc-gen-go-nats. DO NOT EDIT.
// source: example/example.proto

package example

import (
	"context"
	"log/slog"
	proto "google.golang.org/protobuf/proto"
	nats "github.com/nats-io/nats.go"
	micro "github.com/nats-io/nats.go/micro"
)

// handleError is a helper which response with the error.
func handleError(req micro.Request, err error) {
	if sendErr := req.Error("500", err.Error(), nil); sendErr != nil {
		slog.Error(
			"error sending response error",
			slog.String("reason", sendErr.Error()),
			slog.String("subject", req.Subject()),
		)
	}
}

// NewNATSGreeterServer returns the gRPC server as a NATS micro service.
func NewNATSGreeterServer(ctx context.Context, nc *nats.Conn, server GreeterServer, version, subject, queue string) (micro.Service, error) {
	serviceName := "GreeterServer"

	cfg := micro.Config{
		Name:       serviceName,
		Version:    version,
		QueueGroup: queue,
	}

	srv, err := micro.AddService(nc, cfg)
	if err != nil {
		return nil, err
	}

	err = srv.AddEndpoint(
		subject+"."+serviceName+".SayHello",
		micro.ContextHandler(
			ctx,
			func(ctx context.Context, req micro.Request) {
				r := &HelloRequest{}

				/*
					Unmarshal the request.
				*/
				if err := proto.Unmarshal(req.Data(), r); err != nil {
					handleError(req, err)
					return
				}

				/*
					Forward on the original request to the original gRPC service.
				*/
				resp, err := server.SayHello(ctx, r)
				if err != nil {
					handleError(req, err)
					return
				}

				/*
					Take the response from the gRPC service and dump it as a byte array.
				*/
				respDump, err := proto.Marshal(resp)
				if err != nil {
					handleError(req, err)
					return
				}

				/*
					Finally response with the original response from the gRPC service.
				*/
				if err := req.Respond(respDump); err != nil {
					handleError(req, err)
					return
				}
			},
		),
	)

	if err != nil {
		return nil, err
	}

	err = srv.AddEndpoint(
		subject+"."+serviceName+".SayHelloAgain",
		micro.ContextHandler(
			ctx,
			func(ctx context.Context, req micro.Request) {
				r := &HelloRequest{}

				/*
					Unmarshal the request.
				*/
				if err := proto.Unmarshal(req.Data(), r); err != nil {
					handleError(req, err)
					return
				}

				/*
					Forward on the original request to the original gRPC service.
				*/
				resp, err := server.SayHelloAgain(ctx, r)
				if err != nil {
					handleError(req, err)
					return
				}

				/*
					Take the response from the gRPC service and dump it as a byte array.
				*/
				respDump, err := proto.Marshal(resp)
				if err != nil {
					handleError(req, err)
					return
				}

				/*
					Finally response with the original response from the gRPC service.
				*/
				if err := req.Respond(respDump); err != nil {
					handleError(req, err)
					return
				}
			},
		),
	)

	if err != nil {
		return nil, err
	}

	return srv, nil
}
