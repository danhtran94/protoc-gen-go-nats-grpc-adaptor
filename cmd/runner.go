package cmd

import (
	"log/slog"

	"google.golang.org/protobuf/compiler/protogen"
)

// Run starts running the plugin
func Run() error {
	protogen.Options{}.Run(
		func(gen *protogen.Plugin) error {
			for _, file := range gen.Files {
				if !file.Generate {
					continue
				}
				if err := generateFile(gen, file); err != nil {
					return err
				}
			}
			return nil
		},
	)
	return nil
}

// generateFile generates a .pb.go file.
func generateFile(gen *protogen.Plugin, file *protogen.File) error {
	filename := file.GeneratedFilenamePrefix + ".nats.pb.go"
	slog.Info("generating file", slog.String("filename", filename))
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	/*
		Main header of the file.
	*/
	g.P("// Code generated by protoc-gen-go-nats. DO NOT EDIT.")
	g.P("// source: ", file.GeneratedFilenamePrefix, ".proto")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.P("import (")
	g.P()
	g.P(`"context"`)
	g.P(`"errors"`)
	g.P(`"github.com/nats-io/nats.go/micro"`)
	g.P()
	g.P(")")

	/*
		Create a service.
	*/
	for _, service := range file.Services {
		generateServiceInterface(g, service)
		generateServiceUnimplemented(g, service)
	}

	return nil
}

// generateServiceInterface generates a service interface.
func generateServiceInterface(g *protogen.GeneratedFile, service *protogen.Service) {
	g.P()
	g.P("type ", service.GoName, " interface {")

	for _, method := range service.Methods {
		g.P(method.GoName, "(context.Context, *", method.Input.GoIdent.GoName, ") (*", method.Output.GoIdent.GoName, ", error)")
	}

	g.P("}")
	g.P()
}

// generateServiceUnimplemented generates an unimplemented service used for inheritance.
func generateServiceUnimplemented(g *protogen.GeneratedFile, service *protogen.Service) {
	g.P()
	name := service.GoName + "Unimplemented"
	g.P("type ", name, " struct{}")

	for _, method := range service.Methods {
		g.P("func (s *", name, ") ", method.GoName, "(ctx context.Context, req *", method.Input.GoIdent.GoName, ") (*", method.Output.GoIdent.GoName, ", error) {")
		g.P("return nil, errors.New(\"not implemented\")")
		g.P("}")
		g.P()
	}

	g.P()
}
